#!/bin/bash
set -xeuo pipefail

PID_FILE=/tmp/wildfly.pid

# restore maven dependencies downloaded in a previous build,
# so they do not have to be downloaded again.
# /opt/s2i/destination/artifacts will only be present in the incremental build scenario
# in which the target image name is an existing docker image which contains
# dependencies from a prior build execution.
function restore_saved_artifacts() {
  if [ "$(ls -A /opt/s2i/destination/artifacts/ 2>/dev/null)" ]; then
    echo -n "Restoring saved artifacts from prior build..."
    mv /opt/s2i/destination/artifacts/* /opt/s2i/destination/artifacts/.[!.]* $HOME/.
  fi
}

# Return the deployment-scanner configuration
function getscanconfig() {
  count=0
  while [ ${count} -lt 10 ]; do
    scanconfig=`/wildfly/bin/jboss-cli.sh -u=$ADMIN -p=$PASSWORD -c "/subsystem=deployment-scanner/:read-resource(recursive=true)" 2>&1 || :`
    if [[ $scanconfig =~ '"outcome" => "success"' ]] ; then
      SCANCONFIG=$scanconfig
      return
    fi
    let count+=1

    sleep 2
  done
}

# Verify that the deployment scanner has finished running
function waitondeployments() {
  if ! ismgmtup; then
    echo "Timed out waiting for management listening port"
    echo "Could not connect to JBoss management interface, skipping deployment verification"
  else
    SCANCONFIG=""
    c=0
    while [ "$SCANCONFIG" == "" ] && [ $c -lt 5 ]; do
      getscanconfig
      if [ "$SCANCONFIG" != "" ]; then
        break
      fi
      sleep 2
      let c=c+1
    done

    if [ "$SCANCONFIG" == "" ]; then
      echo "Could not connect to JBoss management interface, skipping deployment verification"
    elif [[ $SCANCONFIG =~ '"scan-enabled" => true' ]]; then
      DEPLOYMENTS_DIR=/wildfly/standalone/deployments
      pushd $DEPLOYMENTS_DIR

      artifacts=()

      while read -r -d $'\0'; do
        artifacts+=("$REPLY")
      done < <(find . -iregex '.*\.\([ejrsw]ar\|zip\)$' -print0)

      deployexploded=false
      if [[ $SCANCONFIG =~ '"auto-deploy-exploded" => true' ]]; then
        deployexploded=true
      fi
      deployarchive=false
      if [[ $SCANCONFIG =~ '"auto-deploy-zipped" => true' ]]; then
        deployarchive=true
      fi

      artifactsdeployed=()
      artifactsfailed=()
      artifactsskipped=()
      artifactsunknown=()
      for artifact in ${artifacts[*]}; do
        if ( [ -f $artifact ] && $deployarchive ) || ( [ -d $artifact ] && $deployexploded ); then
          # TODO triple check this logic, add a timeout
          while [[ -f ${artifact}.isdeploying || -f ${artifact}.pending ]]; do
            echo "Artifact: ${artifact} is still deploying"
            sleep 10
          done

          if [ -f ${artifact}.deployed ]; then
            artifactsdeployed+=($artifact)
          elif [ -f ${artifact}.failed ]; then
            artifactsfailed+=($artifact)
          else
            artifactsunknown+=($artifact)
          fi

        else
          # artifact skipped because of deployment scanner config
          artifactsskipped+=($artifact)
        fi
      done

      popd

      if [ ${#artifactsskipped[@]} -gt 0 ]; then
        echo "Artifacts skipped because of deployment-scanner configuration: ${artifactsskipped[*]}"
      fi

      if [ ${#artifactsfailed[@]} -gt 0 ]; then
        echo "Failed deployments: ${artifactsfailed[*]}"
        return 1
      fi

      if [ ${#artifactsdeployed[@]} -gt 0 ]; then
        echo "Artifacts deployed: ${artifactsdeployed[*]}"
      fi

      if [ ${#artifactsunknown[@]} -gt 0 ]; then
        echo "Artifacts in an unknown state: ${artifactsunknown[*]}"
      fi
    else
      echo "Deployment scanner disabled, skipping deployment verification"
    fi
  fi
}

# Check if the server http port is up
function ishttpup() {
  count=0
  while [ ${count} -lt 64 ]
  do
    if ! curl --head --silent --fail --location --max-time 2 "0.0.0.0:8080" > /dev/null; then
      echo "Found 0.0.0.0:8080 listening port"
      return 0
    fi

    # if the process failed to start, error out immediately
    # rather than waiting for the timeout on the port being available.
    pid=$(cat $PID_FILE);
    if ! ps | grep -v grep | grep $pid > /dev/null; then
      return 2
    fi

    let count=${count}+1
  done

  return 1
}

# Check if the server mgmt port is up
function ismgmtup() {
  if ! curl --head --silent --fail --location --max-time 16 "0.0.0.0:9990" > /dev/null; then
    echo "Found 0.0.0.0:9990 listening port"
    return 0
  fi

  return 1
}

ADMIN=admin
PASSWORD=passw0rd_

# Source code provided to S2I is at ${HOME}
LOCAL_SOURCE_DIR=${HOME}
mkdir -p $LOCAL_SOURCE_DIR

# Resulting WAR files will be deployed to /wildfly/standalone/deployments
DEPLOY_DIR=/wildfly/standalone/deployments
mkdir -p $DEPLOY_DIR

# Copy the source for compilation
mv /opt/s2i/destination/src/* $LOCAL_SOURCE_DIR
# we move the git repo that was checked out, but don't exit if it fails, as we may be doing a build for a simple wf tester image
mv /opt/s2i/destination/src/.git $LOCAL_SOURCE_DIR/ || true;

chgrp -R 0 $LOCAL_SOURCE_DIR
chmod -R g+rw $LOCAL_SOURCE_DIR

# If a pom.xml is present, this is a normal build scenario
# so run maven.
if [ -f "$LOCAL_SOURCE_DIR/pom.xml" ]; then
  # restore any maven dependencies which will be present if this is an
  # incremental build
  restore_saved_artifacts

  pushd $LOCAL_SOURCE_DIR &> /dev/null
  JAVA_HOME=/etc/alternatives/java_sdk_1.7.0

  if [ -z "$MAVEN_ARGS" ]; then
    export MAVEN_ARGS="package -Popenshift -DskipTests -B"
  fi
  if [ -n "$MAVEN_ARGS_APPEND" ]; then
    export MAVEN_ARGS="$MAVEN_ARGS $MAVEN_ARGS_APPEND"
  fi
  echo "Found pom.xml... attempting to build with 'mvn ${MAVEN_ARGS}'"

  mvn --version
  mvn $MAVEN_ARGS

  ERR=$?
  if [ $ERR -ne 0 ]; then
    echo "Aborting due to error code $ERR from mvn package"
    exit $ERR
  fi

  echo "Copying built ear files into $DEPLOY_DIR for later deployment..."
  popd &> /dev/null
else
  echo "Copying binaries in source directory into $DEPLOY_DIR for later deployment..."
  cp $LOCAL_SOURCE_DIR/*.ear $DEPLOY_DIR >& /dev/null || true
  chgrp -R 0 $DEPLOY_DIR
  chmod -R g+rw $DEPLOY_DIR
fi

if [ -d $LOCAL_SOURCE_DIR/target ]; then
  cp $LOCAL_SOURCE_DIR/target/*.ear $DEPLOY_DIR >& /dev/null
  chgrp -R 0 $DEPLOY_DIR
  chmod -R g+rw $DEPLOY_DIR
fi
if [ -d $LOCAL_SOURCE_DIR/deployments ]; then
  cp $LOCAL_SOURCE_DIR/deployments/*.ear $DEPLOY_DIR >& /dev/null
  chgrp -R 0 $DEPLOY_DIR
  chmod -R g+rw $DEPLOY_DIR
fi

if [ -d $LOCAL_SOURCE_DIR/cfg ]; then
  echo "Copying config files from project..."
  cp cfg/* /wildfly/standalone/configuration
  chgrp -R 0 /wildfly/standalone/configuration
  chmod -R g+rw /wildfly/standalone/configuration
fi

if [ -d $LOCAL_SOURCE_DIR/modules ]; then
  echo "Copying modules from project..."
  mkdir /wildfly/provided_modules
  cp -r modules/* /wildfly/provided_modules
  chgrp -R 0 /wildfly/provided_modules
  chmod -R g+rw /wildfly/provided_modules
fi

#################### HBEE related assembly #########################
function createUnitTester(){
     echo "unpacking hb-data.tar.gz to create a unit tester wf image.."
     echo "extracting hb-data.tar"
     mv $LOCAL_SOURCE_DIR/hb-data.tar.gz /opt/hummingbird/data/
     cd /opt/hummingbird/data/
     gunzip hb-data.tar.gz
     tar xvf hb-data.tar > /dev/null 2> /dev/null
     rm hb-data.tar
}

function buildPIM(){
    
    restore_saved_artifacts
    JAVA_TOOL_OPTIONS=-Dfile.encoding=UTF8
    echo "creating $LOCAL_SOURCE_DIR/hbgwt/lib/ivy/ivysettings.properties"
    echo "hbrepo.dir=${LOCAL_SOURCE_DIR}/hbgwt/lib/ivy/repo/" > $LOCAL_SOURCE_DIR/hbgwt/lib/ivy/ivysettings.properties
    echo "creating $LOCAL_SOURCE_DIR/hbgwt/HBDynaWeb/.apt_generated directory"
    mkdir -p $LOCAL_SOURCE_DIR/hbgwt/HBDynaWeb/.apt_generated $LOCAL_SOURCE_DIR/hbgwt/HBEE/EarContent/lib
    mkdir -p /opt/hummingbird/data/hbgwt/HBEJB/
    cp $LOCAL_SOURCE_DIR/hbgwt/HBEJB/config.properties /opt/hummingbird/data/hbgwt/HBEJB/
    
#this will be removed by an actual PIM code change improvement in JIRA # OP-15808
    sed -i.bak s/"mail\.mumms\.com"/"mail-gce\.mumms\.com"/ $LOCAL_SOURCE_DIR/hbgwt/HBUtil/src/mailConfig.properties
    
    cd $LOCAL_SOURCE_DIR/hbgwt/HBEE/
    cp $LOCAL_SOURCE_DIR/hbgwt/docker/wildfly/8.1/standalone.xml /wildfly/standalone/configuration/standalone.xml.src
    cat  $LOCAL_SOURCE_DIR/hbgwt/docker/wildfly/8.1/standalone.xml | sed s/"\${PIM_REF_DB_HOST}"/$PIM_REF_DB_HOST/g | sed s/"\${PIM_REF_DB_NAME}"/$PIM_REF_DB_NAME/g | sed s/"\${PIM_REF_DB_USER}"/$PIM_REF_DB_USER/g | sed s/"\${PIM_REF_DB_PASSWORD}"/$PIM_REF_DB_PASSWORD/g > /wildfly/standalone/configuration/standalone.xml
    cd $LOCAL_SOURCE_DIR/hbgwt/HBEE/
    ant  -Dfile.encoding=UTF8 -DHB_HOME=$LOCAL_SOURCE_DIR -DSKIP_GWT_COMPILE=$SKIP_GWT_COMPILE -DpasswordModuleRequired=$SKIP_GWT_COMPILE   -DHB_UNITTEST_DIR=$LOCAL_SOURCE_DIR/hbgwt/HBEJB/ -DGIT_HOME=$LOCAL_SOURCE_DIR  build
    
    echo "extracting hb-data.tar"
    mv $LOCAL_SOURCE_DIR/hbgwt/dist/hb-data.tar /opt/hummingbird/data/
    cd /opt/hummingbird/data/
    tar xvf hb-data.tar > /dev/null 2> /dev/null

    

    echo "setting up files for running liquibase on startup"
    mkdir -p /opt/hummingbird/data/hbgwt/HBJPA/ /opt/hummingbird/data/hbgwt/lib/ivy/
    cp -Rf $LOCAL_SOURCE_DIR/hbgwt/HBJPA/* /opt/hummingbird/data/hbgwt/HBJPA/
    cp -Rf $LOCAL_SOURCE_DIR/hbgwt/lib/ivy/* /opt/hummingbird/data/hbgwt/lib/ivy/
    
#if we need to, then run the unit tests
    if [ "$RUN_UNIT_TESTS" = "true" ]
    then
	    echo "spinning up unit test assets.."
	    oc login https://master.gca-dev.mumms.com --token=$OC_LOGIN_TOKEN
	    oc project pim
	    oc process -f /opt/hummingbird/pim-services-tests-template.yaml -v INSTANCE_LABEL=$INSTANCE_LABEL-tests | oc create-f

	    mkdir -p $LOCAL_SOURCE_DIR/openshift-tests
	    mv $LOCAL_SOURCE_DIR/hbgwt/dist/hb-data.tar $LOCAL_SOURCE_DIR/openshift-tests/
	    gzip $LOCAL_SOURCE_DIR/hbgwt/dist/hb-data.tar
	    cp $LOCAL_SOURCE_DIR/hbgwt/docker/wildfly/8.1/standalone.xml $LOCAL_SOURCE_DIR/openshift-tests/
	    oc start-build --from-dir=$LOCAL_SOURCE_DI/openshift-tests/  bc/wf-tst-$INSTANCE_LABEL-tests
	    oc logs -f bc/wf-tst-$INSTANCE_LABEL-tests
	    
	    
	    echo "liquifying root db $PIM_ROOT_DB "
	    ant -f $LOCAL_SOURCE_DIR/hbgwt/HBJPA/build.xml download-ivy init-ivy
	    ant -f $LOCAL_SOURCE_DIR/hbgwt/HBJPA/build.xml -Ddatabase.username=$PIM_DB_USER -Ddatabase.password=$PIM_DB_PASSWORD -Ddb.changelog.file=$LOCAL_SOURCE_DIR/hbgwt/HBJPA/liquibase/changelog/db.changelog-master.xml -Ddatabase.url=jdbc:postgresql://$PIM_ROOT_DB:5432/ liquibase-update-database -Ddatabase.name=hummingbird
	    echo "liquifying ref db"
	    ant -f $LOCAL_SOURCE_DIR/hbgwt/HBRefJPA/build.xml -Ddatabase.username=$PIM_DB_USER -Ddatabase.password=$PIM_DB_PASSWORD -Ddb.changelog.file=$LOCAL_SOURCE_DIR/hbgwt/HBRefJPA/liquibase/changelog/ref-db.changelog-master.xml -Ddatabase.url=jdbc:postgresql://$PIM_REF_DB_HOST:5432/hummingbird_reference liquibase-update-ref-db -Ddatabase.name=hummingbird_reference
	    cp $LOCAL_SOURCE_DIR/hbgwt/docker/wildfly/8.1/standalone.xml /wildfly/standalone/configuration/standalone.xml.src
	    cat  $LOCAL_SOURCE_DIR/hbgwt/docker/wildfly/8.1/standalone.xml | sed s/"\${PIM_REF_DB_HOST}"/$PIM_REF_DB_HOST/g | sed s/"\${PIM_REF_DB_NAME}"/$PIM_REF_DB_NAME/g | sed s/"\${PIM_REF_DB_USER}"/$PIM_REF_DB_USER/g | sed s/"\${PIM_REF_DB_PASSWORD}"/$PIM_REF_DB_PASSWORD/g > /wildfly/standalone/configuration/standalone.xml
	    cd $LOCAL_SOURCE_DIR/hbgwt/HBUnitTest/;
	    unset LDAP_HOST;
	    cp -Rf $LOCAL_SOURCE_DIR/hbgwt/HBEJB/resources/* /opt/hummingbird/data/hbgwt/HBEJB/resources/
	    ant -DWILDFLY_HOME=/wildfly/ -DHB_HOME=$LOCAL_SOURCE_DIR -DSKIP_GWT_COMPILE=$SKIP_GWT_COMPILE -DPIM_DB_USER=$PIM_DB_USER -DPIM_DB_PASSWORD=$PIM_DB_PASSWORD  -DHB_UNITTEST_DIR=$LOCAL_SOURCE_DIR/hbgwt/HBEJB/ -DGIT_HOME=$LOCAL_SOURCE_DIR -DPIM_ROOT_DB=$PIM_ROOT_DB -DPIM_REF_DB_HOST=$PIM_REF_DB_HOST -DPIM_ADMIN_DB=$PIM_ADMIN_DB -Ddatabase.url=jdbc:postgresql://$PIM_ROOT_DB:5432/ -Ddatabase.username=hummingbird -Ddatabase.password=$PIM_DB_PASSWORD -Ddb.changelog.file=$LOCAL_SOURCE_DIR/hbgwt/HBJPA/liquibase/changelog/db.changelog-master.xml -Duser.timezone=UTC -Dcontexts=test -DTEST_HOST=wf-tst-$INSTANCE_LABEL-tests run-openshift-tests 
	    rm -rf /opt/hummingbird/data/hbgwt/HBEJB/resources
	    oc delete all -l instance=$INSTANCE_LABEL-tests
    fi
    
    
    mv $LOCAL_SOURCE_DIR/hbgwt/dist/HBEE.ear /wildfly/standalone/deployments/
    
    echo "cleaning up"
    rm -rf $LOCAL_SOURCE_DIR/*
    rm -rf /opt/s2i/destination/src/*

}

if [ "$(ls -A $LOCAL_SOURCE_DIR/hb-data.tar.gz)" ]; then
    echo "found hb-data.tar.gz in s2i input."
    createUnitTester;
else
    echo "did not find hb-data.tar.gz in s2i input. proceeding to build PIM"
    buildPIM;
fi

#################### HBEE related assembly #########################

echo "...done"
exit 0;

# This logic is intended to deploy the app as part of assemble
# but many apps fail to deploy because they require additional
# resources to be present, eg databases, which are not available
# at build time, so don't do this for now.

# add admin user
#/wildfly/bin/add-user.sh $ADMIN $PASSWORD --silent

#echo "Starting wildfly for deployment"
#/wildfly/bin/standalone.sh -b 0.0.0.0 -bmanagement 0.0.0.0 &
#echo $! > ${PID_FILE}

#rc=0
#ishttpup || rc=$?
#if [ $rc -eq 1 ]; then
#  echo "Timed out waiting for http listening port for wildfly process"
#  exit 1
#elif [ $rc -eq 2 ]; then
#  echo "wildfly process failed to start"
#  exit 2
#fi

#waitondeployments
#rc=$?
#/wildfly/bin/jboss-cli.sh -u=$ADMIN -p=$PASSWORD -c ":shutdown"
#rm /tmp/wildfly.pid

# remove admin user
#sed -i '/^#/! s/^/#/' /wildfly/{standalone,domain}/configuration/mgmt-{groups,users}.properties

#exit $rc
